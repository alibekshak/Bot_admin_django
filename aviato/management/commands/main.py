import logging
import datetime
from random import randint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentTypes

from .config import API_TOKEN, admins
from .keyboard import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled

from loguru import logger as l
from geopy.geocoders import Nominatim
from fake_useragent import UserAgent

from aviato.models import *
from aviato.management.commands.db import *
from aviato.management.commands.keyboard import *

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)


class D(StatesGroup):
    user_id = State()
    code = State()
    name = State()
    note = State()
    note1 = State()
    address = State()
    prod = State()
    match = State()
    match2 = State()
    match3 = State()
    match4 = State()
    remake_request = State()
    edit_product = State()
    dist = State()
    dop_information = State()
    attach_check = State()
    dob_tovar = State()
    change_tovar = State()

    pr1 = State()
    pr2 = State()
    pr3 = State()
    pr4 = State()

    tv1 = State()
    tv2 = State()
    tv3 = State()
    tv4 = State()

    edit_request_1 = State()
    edit_request_2 = State()
    edit_request_3 = State()
    edit_request_4 = State()
    edit_request_5 = State()


async def count_bool(product):
    if product.bool_count:
        return "‚úÖ –ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏"
    return "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå"

def get_direction1(product):
        if product.direction is None:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        else: return product.direction   

async def get_message_from_product(product):
    cout_bool = await count_bool(product=product)
    products_text = ""
    def get_direction():
        if product.direction is None:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        else: return product.direction   
    
    
    if "," in str(product.product):
        for i in str(product.product).replace('[', '').replace(']', '').split(','):
            products_text += f"{i}\n"
    else:
        for i in str(product.product).split(" "):
            products_text += f"{i}\n"


    text = (
        f"{cout_bool}\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n\n"
        f"–¢–æ–≤–∞—Ä(—ã): \n<b>{products_text}</b>\n"
        f"–¶–µ–Ω–∞: <code>{product.price}</code> —Ä—É–±–ª–µ–π\n–ù–æ–º–µ—Ä: {product.phone}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{get_direction()}</b>\n"
        f"–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: <b>@{product.user.username} ({product.user.role})</b>\n\n"
        f"ID: <code>{product.pk}</code>\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ: <code>{str(product.time_update_location).split('.')[0]}</code>\n"
        f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: <code>{str(product.create_time).split('.')[0]}</code>\n"
    )

    return text.replace("'", "")


async def get_menu(message):
    user = await get_user_or_create(
        user_id=str(message.from_user.id), username=message.from_user.username
    )

    text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ —á–∞—Ç-–±–æ—Ç–µ
<b>¬´RUKEA¬ª</b>!

–î–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —Ä–∞–∑–¥–µ–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá

üëÅ –ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ /start
"""
    if message.chat.id in admins:
        await message.answer(text, reply_markup=admin_menu())

    elif user.role == "–°–Ω–∞–±–∂–µ–Ω–µ—Ü":
        await message.answer(text, reply_markup=supplier_menu())

    elif user.role == "–ê–¥–º–∏–Ω":
        await message.answer(text, reply_markup=admin_menu())

    elif user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        await message.answer(text, reply_markup=manager_menu())

    elif user.role == "–û–ø–µ—Ä–∞—Ç–æ—Ä":
        await message.answer(text, reply_markup=operator_menu())

    elif user.role == "–õ–æ–≥–∏—Å—Ç":
        await message.answer(text, reply_markup=logist_menu())

    elif user.role == "–£–ø–∞–∫–æ–≤—â–∏–∫":
        await message.answer(text, reply_markup=packer_menu())

    elif user.role == "–í–æ–¥–∏—Ç–µ–ª—å":
        await message.answer(text, reply_markup=driver_menu())

    else:
        await message.answer(
            f"{message.from_user.first_name} üëã, \n\n—É –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /code –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
        )


async def get_menu_call(call):
    user = await get_user_or_create(
        user_id=str(call.message.chat.id), username=call.message.from_user.username
    )
    if call.message.chat.id in admins:
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_menu()
        )

    elif user.role == "–°–Ω–∞–±–∂–µ–Ω–µ—Ü":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_menu()
        )

    elif user.role == "–ê–¥–º–∏–Ω":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_menu()
        )

    elif user.role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=manager_menu()
        )

    elif user.role == "–û–ø–µ—Ä–∞—Ç–æ—Ä":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=operator_menu()
        )

    elif user.role == "–õ–æ–≥–∏—Å—Ç":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=logist_menu()
        )

    elif user.role == "–£–ø–∞–∫–æ–≤—â–∏–∫":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=packer_menu()
        )

    elif user.role == "–í–æ–¥–∏—Ç–µ–ª—å":
        await call.message.answer(
            f"üîô –í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=driver_menu()
        )


async def cloud():
    try:
        products = await drive_products()
        for product in products:
            time = int(str(product.time_update_location).split(" ")[1].split(":")[0])
            current_time = int(str(datetime.datetime.now()).split(" ")[1].split(":")[0])
            every_hours = current_time - time - 3
            if every_hours > 6:
                if product.status == "–í –¥–æ—Ä–æ–≥–µ":
                    await bot.send_message(
                        product.user.user_id, "‚ùó –û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
                    )
            if every_hours > 20:
                if product.status == "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
                    operators = await get_operators()
                    for operator in operators:
                        await bot.send_message(
                            operator.user_id, "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã"
                        )

                elif product.status == "–£–ø–∞–∫–æ–≤–∞–Ω":
                    logists = await get_logists()
                    for logist in logists:
                        await bot.send_message(
                            logist.user_id, "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã"
                        )

                elif product.status == "–û–∂–∏–¥–∞–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏":
                    packers = await get_all_packers()
                    for packer in packers:
                        await bot.send_message(
                            packer.user_id, "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã"
                        )

        a = Applications.objects.all()
        for application in a:
            prod = application.products.all()
            for produc in prod:
                if produc.count >= 0:
                    application.bool_count = True
                    application.save()
                else:
                    application.bool_count = False
                    application.save()
                    continue

    except Exception as ex:
        l.error(ex)


@dp.message_handler(commands=["start"], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    await cloud()
    await get_menu(message)



@dp.message_handler(text="üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", state="*")
async def employees(message: types.Message):
    users = await get_all_users()
    text = ""
    for user in users:
        text += f"–¢–µ–ª–µ–≥—Ä–∞–º: @{user.username}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.role}\nID: {user.user_id}\n\n"
    text = text.replace("@None", "–û—Ç—Å—Ç—É—Ç—Å–≤—É–µ—Ç username")
    text += f"\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(users)}</b>"
    await message.answer(text, reply_markup=employees_inline_menu())
    await cloud()


@dp.callback_query_handler(text_startswith="add_employees", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=employees_role_inline()
    )
    await cloud()

@dp.callback_query_handler(text_startswith="supplier_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(
        user_id=call.message.chat.id, code=code, role="–°–Ω–∞–±–∂–µ–Ω–µ—Ü"
    )
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–°–Ω–∞–±–∂–µ–Ω–µ—Ü</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="admin_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(user_id=call.message.chat.id, code=code, role="–ê–¥–º–∏–Ω")
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–ê–¥–º–∏–Ω–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="manager_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = code = randint(100, 999)
    await create_code_employees(
        user_id=call.message.chat.id, code=code, role="–ú–µ–Ω–µ–¥–∂–µ—Ä"
    )
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–ú–µ–Ω–µ–¥–∂–µ—Ä–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="logist_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(user_id=call.message.chat.id, code=code, role="–õ–æ–≥–∏—Å—Ç")
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–õ–æ–≥–∏—Å—Ç</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="operator_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(
        user_id=call.message.chat.id, code=code, role="–û–ø–µ—Ä–∞—Ç–æ—Ä"
    )
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–û–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="driver_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(
        user_id=call.message.chat.id, code=code, role="–í–æ–¥–∏—Ç–µ–ª—å"
    )
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–í–æ–¥–∏—Ç–µ–ª—è</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="packer_code", state="*")
async def dsa1rfxsf3(call: types.CallbackQuery, state: FSMContext):
    code = randint(100, 999)
    await create_code_employees(
        user_id=call.message.chat.id, code=code, role="–£–ø–∞–∫–æ–≤—â–∏–∫"
    )
    await get_menu_call(call)
    await call.message.answer(
        f"–ö–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å <b>–£–ø–∞–∫–æ–≤—â–∏–∫</b> –≤ –±–æ—Ç–µ\n\n–ö–æ–¥: <code>{code}</code>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="remove_employees", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:")
    await D.user_id.set()
    await cloud()


@dp.message_handler(state=D.user_id)
async def dasdasdsa2(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user = await get_user_or_error(user_id=str(message.text))
        if user == "Error":
            await message.answer("‚ùå –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            inlineh1 = types.InlineKeyboardMarkup()

            inlineh1.row(
                    types.InlineKeyboardButton("üó≥Ô∏è –õ–æ–≥–∏—Å—Ç", callback_data="remove_logist_r"), 
                    types.InlineKeyboardButton("üë∑‚Äç‚ôÇÔ∏è –°–Ω–∞–±–∂–µ–Ω–µ—Ü", callback_data="remove_snabj_r")
                )

            inlineh1.row(
                types.InlineKeyboardButton(
                    "üõ°Ô∏è –ê–¥–º–∏–Ω", callback_data=f"remove_admin:{user.user_id}"
                ),
                types.InlineKeyboardButton(
                    "‚≠ê –ú–µ–Ω–µ–¥–∂–µ—Ä", callback_data=f"remove_manager:{user.user_id}"
                ),
            )
            inlineh1.row(
                types.InlineKeyboardButton(
                    "üë®‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data=f"remove_operator:{user.user_id}"
                ),
                types.InlineKeyboardButton(
                    "üîß –í–æ–¥–∏—Ç–µ–ª—å", callback_data=f"remove_driver:{user.user_id}"
                ),
            )
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚öôÔ∏è –£–ø–∞–∫–æ–≤—â–∏–∫", callback_data=f"remove_packer:{user.user_id}"
                )
            )
            await message.answer(
                f"–ò–º—è: @{user.username}\nID: {user.user_id}\n–†–æ–ª—å: {user.role}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=inlineh1,
            )
    else:
        await message.answer("‚ùå –ù–µ—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω ID")
    await state.finish()
    await cloud()


@dp.callback_query_handler(text_startswith="remove_snabj_r")
async def handler(call: types.CallbackQuery):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–°–Ω–∞–±–∂–µ–Ω–µ—Ü")
    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–°–Ω–∞–±–∂–µ–Ω–µ—Ü</b>"
    )
    await cloud()

@dp.callback_query_handler(text_startswith="remove_logist_r")
async def handler(call: types.CallbackQuery):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–õ–æ–≥–∏—Å—Ç")
    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–õ–æ–≥–∏—Å—Ç</b>"
    )
    await cloud()

@dp.callback_query_handler(text_startswith="remove_admin", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–ê–¥–º–∏–Ω")
    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–ê–¥–º–∏–Ω–∞</b>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="remove_manager", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–ú–µ–Ω–µ–¥–∂–µ—Ä")

    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–ú–µ–Ω–µ–¥–∂–µ—Ä–∞</b>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="remove_operator", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–û–ø–µ—Ä–∞—Ç–æ—Ä")

    await get_menu_call(call)

    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–û–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="remove_driver", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–í–æ–¥–∏—Ç–µ–ª—å")
    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–í–æ–¥–∏—Ç–µ–ª—è</b>"
    )
    await cloud()


@dp.callback_query_handler(text_startswith="remove_packer", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    user = await change_role_user(user_id=str(user_id), role="–£–ø–∞–∫–æ–≤—â–∏–∫")
    await get_menu_call(call)
    await call.message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ —Ä–æ–ª—å: <b>–£–ø–∞–∫–æ–≤—â–∏–∫–∞</b>"
    )
    await cloud()


@dp.message_handler(commands=["code"], state="*")
async def code(message: types.Message):
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –≤ –±–æ—Ç–µ: ")
    await D.code.set()
    await cloud()


@dp.message_handler(state=D.code)
async def code(message: types.Message, state: FSMContext):
    text = await find_code_and_apply(user_id=message.from_user.id, code=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è, –§–∞–º–∏–ª–∏—é")
    await D.name.set()
    await cloud()


@dp.message_handler(state=D.name)
async def code(message: types.Message, state: FSMContext):
    name = f"{message.text}"
    await change_name(user_id=str(message.from_user.id), name=name)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –±–∞–∑—É.")
    await state.finish()
    await get_menu(message)
    await cloud()


@dp.message_handler(text="‚úç –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", state="*")
async def userrequests(message: types.Message, state: FSMContext):
    await message.answer("üé§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: ", reply_markup=get_choice_application())


# bez_product
@dp.callback_query_handler(text_startswith="bez_product", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(
        "üñã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω\n\n–¢–æ–≤–∞—Ä\n–ê–¥—Ä–µ—Å\n–ù–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n–¶–µ–Ω–∞ (—á–∏—Å–ª–æ)\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )
    await D.note1.set()
    await cloud()

@dp.message_handler(state=D.note1)
async def userrequests(message: types.Message, state: FSMContext):
    data = message.text.split("\n")
    text = await product_save_bez(user_id=str(message.from_user.id), data=data)
    try:
        operators = await get_operators()
        for operator in operators:
            await bot.send_message(
                operator.user_id, "‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑"
            )
    except:
        pass
    await state.finish()
    await message.answer(text)
    await cloud()


@dp.callback_query_handler(text_startswith="s_product", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer(
        "üñã –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω\n\n–¢–æ–≤–∞—Ä\n–ê–¥—Ä–µ—Å\n–ù–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n–¶–µ–Ω–∞ (—á–∏—Å–ª–æ)\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )
    await D.note.set()
    await cloud()


@dp.message_handler(state=D.note)
async def userrequests(message: types.Message, state: FSMContext):
    await message.delete()
    data = message.text.split("\n")
    text = await product_save(user_id=str(message.from_user.id), data=data)
    try:
        operators = await get_operators()
        for operator in operators:
            await bot.send_message(
                operator.user_id, "‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑"
            )
    except:
        pass
    await state.finish()
    await message.answer(text)
    await cloud()


@dp.message_handler(text="üìî –ó–∞—è–≤–∫–∏", state="*")
async def employees(message: types.Message):
    products = await get_confirm_products()
    if len(products) >= 1:
        for product in products:

            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"remove_request:{product.pk}"
                )
            )
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚úÖ  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"confirm_request:{product.pk}",
                )
            )
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚úç  –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ",
                    callback_data=f"dop_information:{product.pk}",
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    await cloud()


@dp.message_handler(text="üìî –í—Å–µ –ó–∞—è–≤–∫–∏", state="*")
async def employees(message: types.Message):
    products = await get_products()
    if len(products) >= 1:
        for product in products:
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"remove_request:{product.pk}"
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    await cloud()


@dp.callback_query_handler(text_startswith="dop_information", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await D.dop_information.set()
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ:")


@dp.message_handler(state=D.dop_information)
async def employees(message: types.Message, state: FSMContext):
    data = await state.get_data()
    dop_information = message.text
    product_id = data["product_id"]
    text = await set_dop_information(text=dop_information, product_id=product_id)
    await message.answer(text)
    await state.finish()

    product = await get_product(product_id=product_id)
    cout_bool = await count_bool(product=product)
    text = await get_message_from_product(product)
    inlineh1 = types.InlineKeyboardMarkup()
    inlineh1.row(
        types.InlineKeyboardButton(
            "‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"remove_request:{product.pk}"
        )
    )
    inlineh1.row(
        types.InlineKeyboardButton(
            "‚úÖ  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"confirm_request:{product.pk}"
        )
    )
    inlineh1.row(
        types.InlineKeyboardButton(
            "‚úç  –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ",
            callback_data=f"dop_information:{product.pk}",
        )
    )

    photos = [ph.photo for ph in product.products.all()]
    inlineh2 = types.InlineKeyboardMarkup()
    inlineh2.row(types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide"))
    for p in photos:
        try:
            await message.answer_photo(photo=p, reply_markup=inlineh2)
        except:
            pass
    if product.checks_document is None:
        pass
    else:
        try:
            await message.answer_photo(
                photo=open(product.checks_document, "rb"),
                reply_markup=inlineh2,
                caption="–ß–µ–∫",
            )
        except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await message.answer(text, reply_markup=inlineh1)


# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ –≤–Ω–æ–≤—å


@dp.callback_query_handler(text_startswith="confirm_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1] ##################################################################################################
    text = await confirm_product(product_id=product_id)
    try:
        packers = await get_all_packers()
        for packer in packers:
            await bot.send_message(packer.user_id, "‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
    except:
        pass
    await get_menu_call(call)
    await call.message.delete()
    await call.message.answer(text)
    await cloud()


@dp.callback_query_handler(text_startswith="remove_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    text = await delete_product(product_id=product_id)
    await get_menu_call(call)
    await call.message.delete()
    await call.message.answer(text)
    await cloud()


@dp.message_handler(text="üí° –û–∂–∏–¥–∞—é—â–∏–µ —á–µ–∫–∞", state="*")
async def dfs13fdsv(message: types.Message, state: FSMContext):
    products = await get_all_ojid_check()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "üßæ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫", callback_data=f"attach_check:{product.pk}"
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@dp.callback_query_handler(text_startswith="attach_check", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    product_id = call.data.split(":")[1]
    await D.attach_check.set()
    await state.update_data(product_id=product_id)
    await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ üßæ")


@dp.message_handler(content_types=ContentTypes.DOCUMENT, state=D.attach_check)
async def doc_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    path = f"media/documents/{message.from_user.id}_{message.message_id}.pdf"
    if document := message.document:
        await document.download(
            destination_file=f"media/documents/{message.from_user.id}_{message.message_id}.pdf",
        )
        await set_path_file(product_id=data["product_id"], path=path)
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç")
    else:
        await message.asnwer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç!")
    await state.finish()


@dp.message_handler(text="üìï –û—Ç—á–µ—Ç", state="*")
async def employees(message: types.Message):
    answer = await report_info()
    user = await get_user_or_create(user_id=str(message.from_user.id))

    inlineh1 = types.InlineKeyboardMarkup()
    inlineh1.row(
        types.InlineKeyboardButton(
            "üì´ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="ojid_confirmed"
        )
    )
    inlineh1.row(
        types.InlineKeyboardButton("üìÆ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="oj_confirmd"),
        types.InlineKeyboardButton("üì™ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="oj_canceled"),
    )
    inlineh1.row(
        types.InlineKeyboardButton(
            "üë®‚Äçüíª –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É", callback_data="oj_dispatcher"
        ),
        types.InlineKeyboardButton("üöó –í –¥–æ—Ä–æ–≥–µ", callback_data="oj_drive"),
    )
    inlineh1.row(
        types.InlineKeyboardButton(
            "‚ùó –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùó", callback_data="oj_net_v_nalichii"
        )
    )
    inlineh1.row(
        types.InlineKeyboardButton(
            "üì¶ –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ", callback_data="oj_net_logist"
        )
    )
    inlineh1.row(
        types.InlineKeyboardButton("‚ùå –î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫", callback_data="oj_dorozh_brak"),
        types.InlineKeyboardButton("‚ùå –§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫", callback_data="oj_fabr_brak"),
    )
    inlineh1.row(
        types.InlineKeyboardButton("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data="oj_delevired"),
        types.InlineKeyboardButton("‚ùé –û–∂–∏–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="oj_pr"),
    )

    inlineh1.row(
        types.InlineKeyboardButton(
            "üë∑‚Äç‚ôÇÔ∏è –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–ø–∞–∫–æ–≤–∫—É", callback_data="oj_packer"
        )
    )

    await message.answer(answer, reply_markup=inlineh1)
    await cloud()


@dp.message_handler(text="‚ùó –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùó", state="*")
async def dfsfdslf(message: types.Message, state: FSMContext):
    await state.finish()
    products = await net_v_nalichii()
    if len(products) >= 1:
        for product in products:
            orig_product = product.products.all()
            text = ""
            for t in orig_product:
                text += f"–¢–æ–≤–∞—Ä: {t.product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {t.count}\n\n"

            txt = await get_message_from_product(product)
            text += txt

            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –ù–µ—Ç —É –ª–æ–≥–∏—Å—Ç–∞
@dp.callback_query_handler(text_startswith="oj_net_logist")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await net_v_nalichii_logist()

    if len(products) >= 1:
        for product in products:
            orig_product = product.products.all()
            text = ""
            for t in orig_product:
                text += f"–¢–æ–≤–∞—Ä: {t.product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {t.count}\n\n"

            txt = await get_message_from_product(product)
            text += txt

            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass

            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
@dp.callback_query_handler(text_startswith="oj_net_v_nalichii", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await net_v_nalichii()

    if len(products) >= 1:
        for product in products:
            orig_product = product.products.all()
            text = ""
            for t in orig_product:
                text += f"–¢–æ–≤–∞—Ä: {t.product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {t.count}\n\n"

            txt = await get_message_from_product(product)
            text += txt

            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass

            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –û–∂–∏–¥–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã oj_pr
@dp.callback_query_handler(text_startswith="oj_pr", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await oj_pr()

    if len(products) >= 1:
        for product in products:
            text = (
                f"–¢–æ–≤–∞—Ä: {product}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.count}\n"
                f"–û–ø—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {product.opt_price}\n–ù–∞ —Å—É–º–º—É: {product.product_suum}\n"
                f"2.5% –æ—Ç –°—É–º–º—ã –¢–æ–≤–∞—Ä–∞: {product.product_percent}"
            )
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = product.photo
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            if None is photos:
                pass
            else:
                await call.message.answer_photo(photo=photos, reply_markup=inlineh2)
            await call.message.answer(text, reply_markup=inlineh1)
    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
@dp.callback_query_handler(text_startswith="oj_delevired", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await oj_delivered()

    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        pass


# –§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫
@dp.callback_query_handler(text_startswith="oj_fabr_brak", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await fabr_brack_products()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫
@dp.callback_query_handler(text_startswith="oj_dorozh_brak", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await dorozh_brak_products()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –í –¥–æ—Ä–æ–≥–µ
@dp.callback_query_handler(text_startswith="oj_drive", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_drive_pr()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
@dp.callback_query_handler(text_startswith="oj_dispatcher", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_dispatchers()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –£–ø–∞–∫–æ–≤—â–∏–∫—É
@dp.callback_query_handler(text_startswith="oj_packer", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_packers()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ
@dp.callback_query_handler(text_startswith="oj_canceled", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_canceled()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# 
@dp.callback_query_handler(text_startswith="oj_confirmd", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_confirmed()
    if products is None:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        if len(products) >= 1:
            for product in products:
                cout_bool = await count_bool(product=product)
                text = await get_message_from_product(product)
                inlineh1 = types.InlineKeyboardMarkup()
                inlineh1.row(
                    types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
                )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

        else:
            await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


# –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="ojid_confirmed", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    products = await get_ojid_confirmed()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await call.message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await call.message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await call.message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.answer(text, reply_markup=inlineh1)

    else:
        await call.message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


@dp.message_handler(text="üìö –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ", state="*")
async def employees(message: types.Message):
    products = await get_confirmed_products()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚úÖ –í–≤–µ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    callback_data=f"confirmed_request:{product.pk}",
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    await cloud()


@dp.callback_query_handler(text_startswith="confirmed_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    product_id = call.data.split(":")[1]

    await state.update_data(product_id=product_id)

    await call.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ")
    await D.dist.set()


@dp.message_handler(state=D.dist)
async def add_employe(message: types.Message, state: FSMContext):
    try:
        packers = await get_all_packers()
        for packer in packers:
            await bot.send_message(packer.user_id, "‚åõ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
    except Exception as ex:
        l.critical(ex)

    data = await state.get_data()
    dist = message.text
    text = await product_pack(product_id=data["product_id"], dist=dist)

    await get_menu(message)
    await message.answer(text)
    await state.finish()
    await cloud()


# peredan_dispatcher
@dp.callback_query_handler(text_startswith="peredan_dispatcher")
async def handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    product_id = call.data.split(":")[1]
    text = await product_pack_conf(product_id=product_id)
    await call.message.answer(text)
    await cloud()
    await get_menu_call(call=call)

    try:
        logists = await get_logists()
        for logist in logists:
            await bot.send_message(
                logist.user_id,
                "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã",
            )
    except:
        pass

@dp.message_handler(text="üìä –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", state="*")
async def employees(message: types.Message):
    products = await get_packers()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                    types.InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–¥–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É", callback_data=f"peredan_dispatcher:{product.pk}"),
                    types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")




@dp.message_handler(text="‚ö° –ù–µ—É–ø–æ–∫–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", state="*")
async def employees(message: types.Message):
    products = await get_pack_products()
    if len(products) >= 1:
        for product in products:
            text = f"ID: {product.pk}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{get_direction1(product)}</b>\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n"
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚úÖ –£–ø–∞–∫–æ–≤–∞–Ω",
                    callback_data=f"product_pack_logist:{product.pk}",
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏.")
    await cloud()

# –ü–µ—Ä–µ–¥–∞–Ω –ª–æ–≥–∏—Å—Ç—É
@dp.callback_query_handler(text_startswith="product_pack_logist")
async def handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    product_id = call.data.split(":")[1]
    text = await product_pack_logist(product_id=product_id)
    await call.message.answer(text)

    try:
        logists = await get_logists()
        for logist in logists:
            await bot.send_message(
                logist.user_id,
                "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã",
            )
    except:
        pass

    await get_menu_call(call=call)


@dp.callback_query_handler(text_startswith="confirmed2_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    text = await product_pack_conf(product_id=product_id)
    try:
        logists = await get_logists()
        for logist in logists:
            await bot.send_message(
                logist.user_id,
                "‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ–µ –∑–∞–∫–∞–∑—ã",
            )
    except:
        pass
    await get_menu_call(call)
    await call.message.answer(text)
    await cloud()


@dp.callback_query_handler(text_startswith="confirmed_drive_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    text = await handover_product_to_drive(
        product_id=product_id, user_id=str(call.message.chat.id)
    )
    await get_menu_call(call)
    await call.message.answer(text)
    await cloud()


@dp.message_handler(text="üöô –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", state="*")
async def employees(message: types.Message):
    products = await get_active_requests_drive(user_id=message.from_user.id)

    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "‚úÖ –Ø –¥–æ—Å—Ç–∞–≤–∏–ª —ç—Ç–æ—Ç –∑–∞–∫–∞–∑",
                    callback_data=f"conf_r_request:{product.pk}",
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É.")
    await cloud()


@dp.callback_query_handler(text_startswith="conf_r_request", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    text = await delivered(product_id=product_id)
    await get_menu_call(call)
    await call.message.answer(text)
    await cloud()


@dp.message_handler(content_types=["location"])
async def employees(message: types.Message):
    latitude = message.location["latitude"]
    longitude = message.location["longitude"]

    ua = UserAgent()
    random_user_agent = ua.random
    locator = Nominatim(user_agent=random_user_agent)
    location = locator.reverse(f"{latitude}, {longitude}")

    try:
        admin_list = await admins_list()
        for admin in admin_list:
            await bot.send_message(admin.user_id, "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    except:
        pass

    city = location.raw["address"]["city"]
    region = location.raw["address"]["state"]

    text = f"{city}, {region}"
    text1 = await change_location(user_id=message.from_user.id, location=text)
    await get_menu(message)
    await message.answer(text1)
    await cloud()


@dp.message_handler(text="üöì –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π", state="*")
async def employees(message: types.Message):
    products = await applications_drivers()
    if products:
        for product in products:
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    "üó∫ –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"location_dr:{product.pk}"
                )
            )
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    await cloud()


@dp.callback_query_handler(text_startswith="location_dr", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    product = await plea_location(product_id=product_id)
    await bot.send_message(
        product.driver.user_id,
        '<b>‚ùó‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è"</b>',
    )
    await call.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è")
    await cloud()


@dp.message_handler(commands=["product"], state="*")
async def start(message: types.Message, state: FSMContext):
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞: ")
    await D.prod.set()
    await cloud()


@dp.message_handler(state=D.prod)
async def employees(message: types.Message, state: FSMContext):
    product_id = message.text
    product = await find_product(product_id=product_id)
    inlineh1 = types.InlineKeyboardMarkup()
    inlineh1.row(
        types.InlineKeyboardButton(
            "üó∫ –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"location_dr:{product.pk}"
        )
    )
    cout_bool = await count_bool(product=product)
    if product.status == "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" or "–í –¥–æ—Ä–æ–≥–µ" == product.status:
        text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {str(product.delivery_information).replace('None', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: @{product.user.username} ({product.user.role})\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{get_direction1(product)}</b>\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {product.status}\n{cout_bool}"
    else:
        text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {str(product.delivery_information).replace('None', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {product.note}\n–ê–¥—Ä–µ—Å—Å: {product.address}\n–¢–æ–≤–∞—Ä: {product.product}\n–¶–µ–Ω–∞: {product.price}\n–ù–æ–º–µ—Ä: {product.phone}\n–ó–∞–≥—Ä—É–∑–∏–ª —Ç–æ–≤–∞—Ä: @{product.user.username} ({product.user.role})\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{get_direction1(product)}</b>\n\nID: {product.pk}\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(product.location).replace('None', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: {str(product.time_update_location).split('.')[0]}\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ\n{cout_bool}"

    await message.answer(text, reply_markup=inlineh1)
    await cloud()


@dp.message_handler(text="üì¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞", state="*")
async def employees(message: types.Message):
    products = await pack_to_logist()
    if len(products) >= 1:
        for product in products:
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)

            drivers = await get_all_drivers()
            inlineh1 = types.InlineKeyboardMarkup()

            if drivers.count() > 0:
                for driver in drivers:
                    inlineh1.row(
                        types.InlineKeyboardButton(
                            f"üöó {driver.first_name}",
                            callback_data=f"driv:{driver.pk}:{product.pk}",
                        )
                    )
            else:
                inlineh1.row(
                    types.InlineKeyboardButton(
                        f"‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", callback_data=f"dsdsdriv"
                    )
                )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)

    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
    await cloud()


@dp.callback_query_handler(text_startswith="driv", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    product_id = call.data.split(":")[2]

    product = await get_product(product_id=product_id)
    user = await get_user(user_id=str(user_id))
    user_id = user.user_id

    if product:
        if product.delivery_information:
            text = (
                f"–¢–æ–≤–∞—Ä: {str(product.product).replace('[', '').replace(']', '')}\n"
                f"–¶–µ–Ω–∞: {product.price}\n–ê–¥—Ä–µ—Å: {product.address}\n"
                f"–ù–æ–º–µ—Ä: {product.phone}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: ‚úÖ {product.delivery_information}\n"
            ).replace("'", "")        
        else: 
            text = (
                f"–¢–æ–≤–∞—Ä: {str(product.product).replace('[', '').replace(']', '')}\n"
                f"–¶–µ–Ω–∞: {product.price}\n–ê–¥—Ä–µ—Å: {product.address}\n"
                f"–ù–æ–º–µ—Ä: {product.phone}\n"
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå"
            ).replace("'", "")   


        inlineh1 = types.InlineKeyboardMarkup()
        inlineh1.row(
            types.InlineKeyboardButton(
                f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"dr_confirmed:{user_id}:{product_id}"
            )
        )

        photos = [ph.photo for ph in product.products.all()]
        inlineh2 = types.InlineKeyboardMarkup()
        inlineh2.row(
            types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
        )
        for p in photos:
            try:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=str(p),
                    caption=text,
                    reply_markup=inlineh2,
                )
            except:
                pass
        await bot.send_message(chat_id=user_id, text=text, reply_markup=inlineh1)

        await call.message.delete()
        await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        await call.message.answer(
            "‚ùå –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –∫—Ç–æ —Ç–æ —É–¥–∞–ª–∏–ª"
        )
    await cloud()


@dp.callback_query_handler(text_startswith="dr_confirmed", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):

    user_id = call.data.split(":")[1]
    product_id = call.data.split(":")[2]

    user = await get_user_userId(user_id=user_id)
    product = await get_product(product_id=product_id)

    product = await driver_confrimed(user=user, product=product)
    await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑")
    await state.finish()
    await get_menu_call(call)
    await call.message.delete()
    await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")
    await cloud()


@dp.message_handler(text="‚öí –ë—Ä–∞–∫–∏", state="*")
async def employees(message: types.Message):
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: ")
    await D.match.set()
    await cloud()


@dp.message_handler(state=D.match)
async def employees(message: types.Message, state: FSMContext):
    try:
        products = await find_products(info=message.text)
        for product in products:
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    f"‚ú® –§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫", callback_data=f"product_brak_f:{product.pk}"
                ),
                types.InlineKeyboardButton(
                    f"‚ú® –î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫", callback_data=f"product_brak_d:{product.pk}"
                ),
            )
            inlineh1.row(
                types.InlineKeyboardButton(f"–°–∫—Ä—ã—Ç—å", callback_data="message_hide")
            )
            cout_bool = await count_bool(product=product)
            text = await get_message_from_product(product)
            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass
            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(text, reply_markup=inlineh1)
    except Exception as ex:
        await message.answer(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ({ex})")
    await state.finish()
    await cloud()


@dp.callback_query_handler(text_startswith="message_hide", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()
    await cloud()


@dp.callback_query_handler(text_startswith="product_brak_d", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await D.match3.set()
    await state.update_data(product_id=product_id)
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É\n\n–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n–ù–æ–≤–∞—è –¶–µ–Ω–∞ (–≤ —Ü–∏—Ñ—Ä–∞—Ö)\n–°—Ç–∞—Ä—ã–π –¢–æ–≤–∞—Ä\n–°—Ç–∞—Ä–∞—è –¶–µ–Ω–∞ (–≤ —Ü–∏—Ñ—Ä–∞—Ö)"
    )
    await cloud()


@dp.message_handler(state=D.match3)
async def employees(message: types.Message, state: FSMContext):
    _ = await state.get_data()
    data = message.text.split("\n")

    product_title = data[0]
    product_price = data[1]

    product_title2 = data[2]
    product_price2 = data[3]

    product_id = _["product_id"]

    text = await product_match(
        title=product_title,
        price=product_price,
        title2=product_title2,
        price2=product_price2,
        product_id=product_id,
        status="–î–æ—Ä–æ–∂–Ω—ã–π –±—Ä–∞–∫",
    )
    await message.answer(text)
    await state.finish()
    await get_menu(message)
    await cloud()


@dp.callback_query_handler(text_startswith="product_brak_f", state="*")
async def add_employeees(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await D.match2.set()
    await state.update_data(product_id=product_id)
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–±–ª–æ–Ω—É\n\n–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n–ù–æ–≤–∞—è –¶–µ–Ω–∞ (–≤ —Ü–∏—Ñ—Ä–∞—Ö)\n–°—Ç–∞—Ä—ã–π –¢–æ–≤–∞—Ä\n–°—Ç–∞—Ä–∞—è –¶–µ–Ω–∞ (–≤ —Ü–∏—Ñ—Ä–∞—Ö)"
    )
    await cloud()


@dp.message_handler(state=D.match2)
async def employees(message: types.Message, state: FSMContext):
    _ = await state.get_data()
    data = message.text.split("\n")

    product_title = data[0]
    product_price = data[1]

    product_title2 = data[2]
    product_price2 = data[3]

    product_id = _["product_id"]

    text = await product_match(
        title=product_title,
        price=product_price,
        title2=product_title2,
        price2=product_price2,
        product_id=product_id,
        status="–§–∞–±—Ä–∏—á–Ω—ã–π –±—Ä–∞–∫",
    )
    await message.answer(text)
    await state.finish()
    await get_menu(message)
    await cloud()


@dp.message_handler(text="üåè –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", state="*")
async def employees(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await cloud()
    await D.remake_request.set()


@dp.message_handler(state=D.remake_request)
async def efdsfsdff(message: types.Message, state: FSMContext):
    text = message.text
    products = await find_products(info=text)
    if products is None:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.finish()
    else:
        for product in products:
            inlineh1 = types.InlineKeyboardMarkup()
            inlineh1.row(
                types.InlineKeyboardButton(
                    f"üñã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É",
                    callback_data=f"edit_request:{product.pk}",
                )
            )
            inlineh1.row(
                types.InlineKeyboardButton(
                    f"‚ôª –°–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"hide_message"
                )
            )

            photos = [ph.photo for ph in product.products.all()]
            inlineh2 = types.InlineKeyboardMarkup()
            inlineh2.row(
                types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å", callback_data=f"message_hide")
            )
            for p in photos:
                try:
                    await message.answer_photo(photo=p, reply_markup=inlineh2)
                except:
                    pass

            if product.checks_document is None:
                pass
            else:
                try:
                    await message.answer_photo(
                        photo=open(product.checks_document, "rb"),
                        reply_markup=inlineh2,
                        caption="–ß–µ–∫",
                    )
                except: await message.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            cout_bool = await count_bool(product=product)
            text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: {str(product.delivery_information).replace('None', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n–ê–¥—Ä–µ—Å—Å: <b>{product.address}</b>\n–¢–æ–≤–∞—Ä: <b>{product.product}</b>\n–¶–µ–Ω–∞: <b>{product.price}</b>\n–ù–æ–º–µ—Ä: <b>{product.phone}</b>\n–í–ª–∞–¥–µ–ª–µ—Ü —Ç–æ–≤–∞—Ä–∞: <b>@{product.user.username} ({product.user.role})</b>\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <b>{product.note}</b>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{get_direction1(product)}</b>\n\nID: <b>{product.pk}</b>\n–°—Ç–∞—Ç—Éc: <b>{product.status}</b>\n–õ–æ–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: <b>{str(product.location).replace('None', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª–æ –≤: <b>{str(product.time_update_location).split('.')[0]}</b>\n{cout_bool}"
            await message.answer(text, reply_markup=inlineh1)
            await state.finish()


@dp.callback_query_handler(text_startswith="hide_message", state="*")
async def fdfdsfd13(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ")


@dp.callback_query_handler(text_startswith="edit_request", state="*")
async def fdsf31fkx1(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    product_id = call.data.split(":")[1]
    product = await get_product(product_id=product_id)
    text = (
        await get_message_from_product(product=product)
        + "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>"
    )

    inline_kb_full = types.InlineKeyboardMarkup()
    inline_kb_full.row(
        types.InlineKeyboardButton(
            "–¢–æ–≤–∞—Ä", callback_data=f"edit_product1:{product_id}"
        ),
        types.InlineKeyboardButton(
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", callback_data=f"edit_note1:{product_id}"
        ),
    )
    inline_kb_full.row(
        types.InlineKeyboardButton(
            "–ê–¥—Ä–µ—Å", callback_data=f"edit_address1:{product_id}"
        ),
        types.InlineKeyboardButton("–¶–µ–Ω–∞", callback_data=f"edit_price1:{product_id}"),
    )
    inline_kb_full.row(
        types.InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data=f"edit_phone1:{product_id}")
    )
    await call.message.answer(text, reply_markup=inline_kb_full)



@dp.callback_query_handler(text_startswith="edit_phone1")
async def handler(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    await D.edit_request_5.set()


@dp.message_handler(state=D.edit_request_5)
async def handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_phone = message.text
    product_id = data["product_id"]
    text = await change_phone(product_id, new_phone)
    await message.answer(text)
    await get_menu(message=message)
    await state.finish()


######################################################################################################


@dp.callback_query_handler(text_startswith="edit_price1")
async def handler(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É <b>–≤ —Ü–∏—Ñ—Ä–∞—Ö</b>")
    await D.edit_request_4.set()


@dp.message_handler(state=D.edit_request_4)
async def handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_price = message.text
    product_id = data["product_id"]
    text = await change_price(product_id, new_price)
    await message.answer(text)
    await get_menu(message)
    await state.finish()


@dp.callback_query_handler(text_startswith="edit_note1")
async def handler(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ")
    await D.edit_request_3.set()


@dp.message_handler(state=D.edit_request_3)
async def handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_note = message.text
    product_id = data["product_id"]
    text = await change_note(product_id, new_note)
    await message.answer(text)
    await get_menu(message)
    await state.finish()


@dp.callback_query_handler(text_startswith="edit_address1")
async def fdskfj3(call: types.CallbackQuery, state: FSMContext):
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å: ")
    await D.edit_request_2.set()


@dp.message_handler(state=D.edit_request_2)
async def fdf3as(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_address = message.text
    product_id = data["product_id"]
    text = await change_address(product_id, new_address)
    await message.answer(text)
    await get_menu(message)
    await state.finish()


@dp.callback_query_handler(text_startswith="edit_product1", state="*")
async def fdfdsfd13(call: types.CallbackQuery, state: FSMContext):
    prodcut_id = call.data.split(":")[1]
    await state.update_data(product_id=prodcut_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: ")
    await D.edit_request_1.set()


@dp.message_handler(state=D.edit_request_1)
async def fldsk3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_products = message.text
    product_id = data["product_id"]
    text = await change_product_request(product_id, new_products)
    await message.answer(text)
    await get_menu(message)
    await state.finish()


@dp.message_handler(state=D.edit_product)
async def dasfk12fs21(message: types.Message, state: FSMContext):
    data = message.text
    product = await state.get_data()
    text = await product_edit(product_id=product["product_id"], data=data)
    await message.answer(text)


@dp.message_handler(text="üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫", state="*")
async def fdsf13fsa(message: types.Message, state: FSMContext):
    await state.finish()
    text = await get_money()
    await message.answer(text)
    await state.finish()
    await cloud()


@dp.message_handler(commands=["backup"], state="*")
async def start(message: types.Message, state: FSMContext):
    await message.reply_document(open("db.sqlite3", "rb"))


@dp.message_handler(text="üé´ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", state="*")
async def fdsflj3jf(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω –±–æ—Ç—É\n\n–¢–æ–≤–∞—Ä\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–∏—Ñ—Ä–∞–º–∏)\n–¶–µ–Ω–∞ (—Ü–∏—Ñ—Ä–∞–º–∏)\n–§–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—á–µ—Ä–∫ - )\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start"
    )
    await cloud()
    await D.dob_tovar.set()


@dp.message_handler(state=D.dob_tovar)
async def fdsfq3xf(message: types.Message, state: FSMContext):
    data = message.text
    text = await add_product_to_db(data)
    await message.answer(text)
    await state.finish()
    await get_menu(message)


@dp.message_handler(text="üõí –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def fsfdsjfk23(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç <b>–ê—Ä—Ç–∏–∫—É–ª</b> –∏–ª–∏ <b>–ê–π–¥–∏</b>")
    await D.change_tovar.set()


@dp.message_handler(state=D.change_tovar)
async def fdslfk32fx(message: types.Message, state: FSMContext):
    nomer_or_pk = message.text
    products = await find_products_tovar(number=nomer_or_pk)
    if products:

        cout_bool = ""
        if products.availability:
            cout_bool = "‚úÖ –ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏"
        else:
            cout_bool = "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ ‚ùå"

        text = f"–ù–∞–ª–∏—á–∏–µ: <b>{cout_bool}</b>\n \
–¢–æ–≤–∞—Ä: <b>{products.product}</b>\n \
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{products.count}</b>\n \
–¶–µ–Ω–∞: <b>{products.opt_price}</b>\n \
–ù–∞ —Å—É–º–º—É: <b>{products.product_suum}</b>\n \
2.5% –û—Ç –°—É–º–º—ã –¢–æ–≤–∞—Ä–∞: <b>{products.product_percent}</b>"

        inline_kb_full = types.InlineKeyboardMarkup()
        inline_kb_full.row(
            types.InlineKeyboardButton(
                "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"change_tovar:{products.pk}"
            )
        )
        inline_kb_full.row(
            types.InlineKeyboardButton(
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"add_tovar:{products.pk}"
            )
        )
        inline_kb_full.row(
            types.InlineKeyboardButton(
                "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ç–æ–≤—É—é —Ü–µ–Ω—É", callback_data=f"change_price_opt:{products.pk}"
            )
        )
        await message.answer(text, reply_markup=inline_kb_full)

    else:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.finish()


@dp.callback_query_handler(text_startswith="change_tovar", state="*")
async def fdsf31fkx1(call: types.CallbackQuery, state: FSMContext):
    await D.tv1.set()
    product_id = call.data.split(":")[1]
    await call.message.answer("‚úí  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ")
    await state.update_data(product_id=product_id)


@dp.message_handler(state=D.tv1)
async def fsfdsjfk23(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_product = message.text
    product_id = data["product_id"]
    text = await change_product_tv(
        product_id=product_id, product_product=product_product
    )
    await message.answer(text)
    await state.finish()


@dp.callback_query_handler(text_startswith="add_tovar", state="*")
async def fdsf31fkx1(call: types.CallbackQuery, state: FSMContext):
    await D.tv2.set()
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer(
        "‚úí  –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ–µ –Ω–∞–¥–æ –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: "
    )


@dp.message_handler(state=D.tv2)
async def handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_count = message.text
    product_id = data["product_id"]
    text = await change_price_tv(product_id=product_id, new_count=new_count)
    await message.answer(text)
    await state.finish()


@dp.callback_query_handler(text_startswith="change_price_opt", state="*")
async def handler(call: types.CallbackQuery, state: FSMContext):
    await D.tv3.set()
    product_id = call.data.split(":")[1]
    await state.update_data(product_id=product_id)
    await call.message.answer("‚úí  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É: ")


@dp.message_handler(state=D.tv3)
async def handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    price = message.text
    product_id = data["product_id"]
    text = await —Åhange_opt(product_id=product_id, price=price)
    await message.answer(text)
    await state.finish()
